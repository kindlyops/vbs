// Copyright Â© 2021 Kindly Ops, LLC <support@kindlyops.com>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package cmd

import (
	"io/fs"
	"net/http"
	"strings"

	"github.com/hypebeast/go-osc/osc"
	"github.com/kindlyops/vbs/embeddy"
	"github.com/rs/zerolog/log"
	"github.com/spf13/cobra"
	"github.com/spf13/viper"
)

var lightingBridgeCmd = &cobra.Command{
	Use:   "lighting-bridge <companion-ip>",
	Short: "Serve embedded lighting control page",
	Long:  `Use OSC to send messages to Companion API for lighting control.`,
	Run:   lightingBridge,
	Args:  cobra.NoArgs,
}

func lightingBridge(cmd *cobra.Command, args []string) {
	listenAddr := "127.0.0.1:" + viper.GetString("lighting_port")
	dist, _ := fs.Sub(embeddy.GetNextFS(), "dist")

	fs.WalkDir(dist, ".", func(path string, d fs.DirEntry, err error) error {
		if err != nil {
			return err
		}
		log.Debug().Msgf("path=%q, isDir=%v\n", path, d.IsDir())

		return nil
	})

	http.Handle("/", http.FileServer(http.FS(dist)))
	// The API will be served under `/api`.
	http.HandleFunc("/api/switcher/", func(w http.ResponseWriter, r *http.Request) {
		// Consider splitting to a separate map?
		buttons := viper.GetStringMapString("companion_buttons")
		handleOSC(w, r, "/api/switcher/", buttons)
	})
	http.HandleFunc("/api/light/", func(w http.ResponseWriter, r *http.Request) {
		buttons := viper.GetStringMapString("companion_buttons")
		handleOSC(w, r, "/api/light/", buttons)
	})

	log.Debug().Msgf("Starting HTTP server at: http://%s\n", listenAddr)
	err := http.ListenAndServe(listenAddr, nil)

	if err != nil {
		log.Error().Err(err).Msg("error from ListenAndServe")
	}
}

func sendOSC(path string) {
	// This port could be made configurable in the future once companion
	// ships user-visible OSC port configuration
	companionOSCPort := 12321
	client := osc.NewClient(viper.GetString("companion"), companionOSCPort)
	msg := osc.NewMessage(path)
	client.Send(msg)
}

func handleOSC(w http.ResponseWriter, r *http.Request, prefix string, buttons map[string]string) {
	if r.Method != http.MethodPost {
		sendFailureResponse(w, r)
	}

	command := strings.TrimPrefix(r.URL.Path, prefix)
	if button, found := buttons[command]; found {
		log.Debug().Msgf("handleOSC for %s, mapped to %s", command, button)
		sendOSC(button)
		sendOKResponse(w, r)
	} else {
		log.Debug().Msgf("handleOSC couldn't find mapping for %s in %v", command, buttons)
		sendFailureResponse(w, r)
	}
}

func sendFailureResponse(w http.ResponseWriter, _ *http.Request) {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusBadRequest)
	w.Write([]byte("{}"))
}

func sendOKResponse(w http.ResponseWriter, _ *http.Request) {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write([]byte("{}"))
}

// Port to listen for HTTP.
var ServerPort string
var CompanionAddr string

func init() {
	lightingBridgeCmd.Flags().StringVarP(&ServerPort, "port", "p", "7007", "Port to serve website on")
	viper.BindPFlag("lighting_port", lightingBridgeCmd.Flags().Lookup("port"))

	lightingBridgeCmd.Flags().StringVarP(
		&CompanionAddr,
		"companion", "c",
		"127.0.0.1",
		"Address to send companion OSC commands")
	viper.BindPFlag("companion", lightingBridgeCmd.Flags().Lookup("companion"))

	// These defaults will be written to the config file generated by the
	// save-config command. They can then be easily customized for a local
	// companion button layout.
	viper.SetDefault("companion_buttons", map[string]string{
		"green":       "/press/bank/20/10",
		"blue":        "/press/bank/20/11",
		"red":         "/press/bank/20/12",
		"yellow":      "/press/bank/20/13",
		"off":         "/press/bank/20/14",
		"ftb":         "/press/bank/20/4",
		"dsk":         "/press/bank/20/5",
		"keylighton":  "/press/bank/20/2",
		"keylightoff": "/press/bank/20/3",
	})

	rootCmd.AddCommand(lightingBridgeCmd)
}
