// Copyright Â© 2021 Kindly Ops, LLC <support@kindlyops.com>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package cmd

import (
	"github.com/rs/zerolog/log"
	"github.com/spf13/cobra"

	"io/fs"
	"net/http"
	"runtime/pprof"

	"embed"
)

var nextFS embed.FS

var lightingBridgeCmd = &cobra.Command{
	Use:   "lighting-bridge <companion-ip>",
	Short: "Serve embedded lighting control page",
	Long:  `Use OSC to send messages to Companion API for lighting control.`,
	Run:   lightingBridge,
	Args:  cobra.ExactArgs(1),
}

func lightingBridge(cmd *cobra.Command, args []string) {
	//companionAddr := args[0]
	serverAddr := "127.0.0.1:" + ServerPort

	// Root at the `dist` folder generated by the Next.js app.
	distFS, err := fs.Sub(nextFS, "nextjs/dist")
	if err != nil {
		log.Error().Err(err).Msg("error from fs.Sub")
	}

	// The static Next.js app will be served under `/`.
	http.Handle("/", http.FileServer(http.FS(distFS)))
	// The API will be served under `/api`.
	http.HandleFunc("/api", handleAPI)

	// Start HTTP server at :8080.
	log.Debug().Msgf("Starting HTTP server at: http://%s\n", serverAddr)
	err = http.ListenAndServe("serverAddr", nil)
}

func handleAPI(w http.ResponseWriter, _ *http.Request) {
	// Gather memory allocations profile.
	profile := pprof.Lookup("allocs")

	// Write profile (human readable, via debug: 1) to HTTP response.
	err := profile.WriteTo(w, 1)
	if err != nil {
		log.Printf("Error: Failed to write allocs profile: %v", err)
	}
}

// Port to listen for HTTP.
var ServerPort string

func init() {
	lightingBridgeCmd.Flags().StringVarP(&ServerPort, "port", "p", "7007", "Port to serve website on")
	rootCmd.AddCommand(lightingBridgeCmd)
}
